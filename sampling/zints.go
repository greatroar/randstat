// Code generated by generate_ints.go. DO NOT EDIT.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Algorithm L from Li 1994, Reservoir-Sampling Algorithms of Time
// Complexity O(n(1+log(N/n))), ACM TOMS,
// https://doi.org/10.1145%2F198429.198435,
// specialized for various integer types.

package sampling

import (
	"math"
	"math/rand"

	"github.com/greatroar/randstat"
)

func ints31_int(samplesize int, n int32, r rand.Source64, buf []int) []int {
	if samplesize == 0 {
		return buf
	}

	for i := 0; i < samplesize; i++ {
		buf = append(buf, int(i))
	}
	sample := buf[len(buf)-samplesize:]

	var (
		w = float64(1)
		i = float64(samplesize)
		k = 1 / float64(samplesize)
		N = float64(n)
	)
	for {
		w *= math.Exp(math.Log(random01(r)) * k)
		i += 1 + math.Floor(math.Log(random01(r))/math.Log1p(-w))
		if i >= N {
			break
		}
		j := randstat.Int31n(r, int32(len(sample)))
		sample[j] = int(i)
	}

	return buf
}

func ints63_int(samplesize int, n int64, r rand.Source64, buf []int) []int {
	if samplesize == 0 {
		return buf
	}

	for i := 0; i < samplesize; i++ {
		buf = append(buf, int(i))
	}
	sample := buf[len(buf)-samplesize:]

	var (
		w = float64(1)
		i = float64(samplesize)
		k = 1 / float64(samplesize)
		N = float64(n)
	)
	for {
		w *= math.Exp(math.Log(random01(r)) * k)
		i += 1 + math.Floor(math.Log(random01(r))/math.Log1p(-w))
		if i >= N {
			break
		}
		j := randstat.Int63n(r, int64(len(sample)))
		sample[j] = int(i)
	}

	return buf
}

func ints31_int32(samplesize int, n int32, r rand.Source, buf []int32) []int32 {
	if samplesize == 0 {
		return buf
	}

	for i := 0; i < samplesize; i++ {
		buf = append(buf, int32(i))
	}
	sample := buf[len(buf)-samplesize:]

	var (
		w = float64(1)
		i = float64(samplesize)
		k = 1 / float64(samplesize)
		N = float64(n)
	)
	for {
		w *= math.Exp(math.Log(random01(r)) * k)
		i += 1 + math.Floor(math.Log(random01(r))/math.Log1p(-w))
		if i >= N {
			break
		}
		j := randstat.Int31n(r, int32(len(sample)))
		sample[j] = int32(i)
	}

	return buf
}

func ints31_int64(samplesize int, n int32, r rand.Source, buf []int64) []int64 {
	if samplesize == 0 {
		return buf
	}

	for i := 0; i < samplesize; i++ {
		buf = append(buf, int64(i))
	}
	sample := buf[len(buf)-samplesize:]

	var (
		w = float64(1)
		i = float64(samplesize)
		k = 1 / float64(samplesize)
		N = float64(n)
	)
	for {
		w *= math.Exp(math.Log(random01(r)) * k)
		i += 1 + math.Floor(math.Log(random01(r))/math.Log1p(-w))
		if i >= N {
			break
		}
		j := randstat.Int31n(r, int32(len(sample)))
		sample[j] = int64(i)
	}

	return buf
}

func ints63_int64(samplesize int, n int64, r rand.Source64, buf []int64) []int64 {
	if samplesize == 0 {
		return buf
	}

	for i := 0; i < samplesize; i++ {
		buf = append(buf, int64(i))
	}
	sample := buf[len(buf)-samplesize:]

	var (
		w = float64(1)
		i = float64(samplesize)
		k = 1 / float64(samplesize)
		N = float64(n)
	)
	for {
		w *= math.Exp(math.Log(random01(r)) * k)
		i += 1 + math.Floor(math.Log(random01(r))/math.Log1p(-w))
		if i >= N {
			break
		}
		j := randstat.Int63n(r, int64(len(sample)))
		sample[j] = int64(i)
	}

	return buf
}
